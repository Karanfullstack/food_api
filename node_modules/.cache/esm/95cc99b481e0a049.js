let Joi,Product,multer,path,fs;_81e‍.x([["default",()=>_81e‍.o]]);_81e‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_81e‍.w("../models",[["Product",["Product"],function(v){Product=v}]]);_81e‍.w("multer",[["default",["multer"],function(v){multer=v}]]);_81e‍.w("path",[["default",["path"],function(v){path=v}]]);_81e‍.w("fs",[["default",["fs"],function(v){fs=v}]]);




const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, "uploads/"),
  filename: (req, file, cb) => {
    const uniqueName = `${Date.now()}-${Math.round(
      Math.random() * 1e9
    )}${path.extname(file.originalname)}`;

    cb(null, uniqueName);
  },
});

const handelMultipartData = multer({
  storage,
  limits: {fileSize: 1000000 * 5},
}).single("image");

const productController = {
  async store(req, res, next) {
    handelMultipartData(req, res, (err) => {
      if (err) {
        return next(CustomErrorHandler.serverError(err.message));
      }
      _81e‍.g.console.log(req.file.path);
      const filePath = req.file.path;
      // validate request
      const productSchema = Joi.object({
        name: Joi.string().required(),
        price: Joi.number().required(),
        size: Joi.string().required(),
      });
      const {error} = productSchema.validate(req.body);

      if (error) {
        // delete the upload file
        fs.unlink(``)
      }

      res.json({});
    });
  },
};

_81e‍.d(productController);
