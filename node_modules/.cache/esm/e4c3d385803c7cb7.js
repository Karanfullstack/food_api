let Joi,bcrpt,JwtService,RefreshToken,User,CustomErrorHandler,REFRESH_SECRET;_803‍.x([["default",()=>_803‍.o]]);_803‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_803‍.w("bcrypt",[["default",["bcrpt"],function(v){bcrpt=v}]]);_803‍.w("../../services/JwtSertice",[["default",["JwtService"],function(v){JwtService=v}]]);_803‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_803‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_803‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);





const loginController = {
  async login(req, res, next) {
    // Validation Login
    const loginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
    });
    const {error} = loginSchema.validate(req.body);

    if (error) {
      return next(error);
    }
    const {email} = req.body;
    try {
      const user = await User.findOne({email});
      if (!user) {
        return next(CustomErrorHandler.wrongCredentials());
      }
      // compare the password
      const match = await bcrpt.compare(req.body.password, user.password);

      if (!match) {
        return next(wrongCredentials());
      }
      // toke generate
      const access_token = JwtService.sign({_id: user._id, role: user.role});
      const refresh_token = JwtService.sign(
        {_id: user._id, role: user.role},
        "1y",
        REFRESH_SECRET
      );

      // database whitelist
      await RefreshToken.create({token: refresh_token});
      res.json({access_token, refresh_token});
      
    } catch (err) {
      return next(err);
    }
  },
};

_803‍.d(loginController);
